//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.08.08 at 01:05:25 PM CEST 
//

package org.eclipse.emf.ecore.jaxbmodel;

import com.incquerylabs.arrowhead.tools.magic.Wizard;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "EGenericType", propOrder = {"eUpperBound", "eTypeArguments", "eLowerBound"})
public class EGenericType extends EObject {

    protected EGenericType eUpperBound;
    protected List<EGenericType> eTypeArguments;
    protected EGenericType eLowerBound;
    @XmlAttribute(name = "eRawType")
    @XmlSchemaType(name = "anyURI")
    protected String eRawType;
    @XmlAttribute(name = "eTypeParameter")
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object eTypeParameter;
    @XmlAttribute(name = "eClassifier")
    @XmlSchemaType(name = "anyURI")
    protected String eClassifier;

    @Override
    public void subCompartmentalize(Path parent, Element topParent, Path topPath) throws IOException {
        String name = "GenericType" + Wizard.gTypeSuffix++;
        String filename = Wizard.sanitizeFilename(name);
        Path xml = parent.resolve(filename + ".xml");
        if(Files.exists(xml)){
            filename = Wizard.degenarilzeName(parent, name);
            xml = parent.resolve(filename + ".xml");
        }
        Path dir = parent.resolve(filename);
        Files.createDirectory(dir);
        Files.createFile(xml);

        Element ref = topParent.addElement(Wizard.REF);
        ref.addAttribute(Wizard.HREF, topPath.relativize(xml).toString());
        Document doc = DocumentHelper.createDocument();
        Element me = doc.addElement("eTypeArguments");
        me.addAttribute(Wizard.TYPE, "ecore:EGenericType"); //TODO find examples
        me.addAttribute("eRawType", eRawType);
        if (eTypeParameter != null) {
            me.addAttribute("eTypeParameter", eTypeParameter.toString());
        }
        me.addAttribute("eClassifier", eClassifier);

        if (eLowerBound != null) {
            eLowerBound.subCompartmentalize(dir, me, xml);
        }
        if (eTypeArguments != null) {
            for (EGenericType t : eTypeArguments) {
                t.subCompartmentalize(dir, me, xml);
            }
        }
        if (eUpperBound != null) {
            eUpperBound.subCompartmentalize(dir, me, xml);
        }

        Wizard.writeDocument(xml, doc);
    }


    public EGenericType getEUpperBound() {
        return eUpperBound;
    }

    public void setEUpperBound(EGenericType value) {
        this.eUpperBound = value;
    }

    public List<EGenericType> getETypeArguments() {
        if (eTypeArguments == null) {
            eTypeArguments = new ArrayList<EGenericType>();
        }
        return this.eTypeArguments;
    }

    public EGenericType getELowerBound() {
        return eLowerBound;
    }

    public void setELowerBound(EGenericType value) {
        this.eLowerBound = value;
    }

    public String getERawType() {
        return eRawType;
    }

    public void setERawType(String value) {
        this.eRawType = value;
    }

    public Object getETypeParameter() {
        return eTypeParameter;
    }

    public void setETypeParameter(Object value) {
        this.eTypeParameter = value;
    }

    public String getEClassifier() {
        return eClassifier;
    }

    public void setEClassifier(String value) {
        this.eClassifier = value;
    }

}
