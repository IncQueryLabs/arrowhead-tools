//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.08.08 at 01:05:25 PM CEST 
//

package org.eclipse.emf.ecore.jaxbmodel;

import com.incquerylabs.arrowhead.tools.magic.Wizard;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "EOperation", propOrder = {"eTypeParameters", "eParameters", "eGenericExceptions"})
public class EOperation extends ETypedElement {

    protected List<ETypeParameter> eTypeParameters;
    protected List<EParameter> eParameters;
    protected List<EGenericType> eGenericExceptions;
    @XmlAttribute(name = "eExceptions")
    protected List<String> eExceptions;

    @Override
    public void subCompartmentalize(Path parent, Element topParent, Path topPath) throws IOException {
        Path dir = parent.resolve(name);
        Files.createDirectory(dir);
        Path xml = parent.resolve(name + ".xml");
        Files.createFile(xml);

        Element ref = topParent.addElement(Wizard.REF);
        ref.addAttribute(Wizard.HREF, topPath.relativize(xml).toString());
        Document doc = DocumentHelper.createDocument();
        Element me = doc.addElement("eOperations");
        me.addAttribute("name", name);
        Wizard.writeETypedElementAttributes(me, this);
        Wizard.addListAttribute(me, "eExceptions", eExceptions);

        for (EAnnotation a : eAnnotations) {
            a.subCompartmentalize(dir, me, xml);
        }
        if (eGenericType != null) {
            eGenericType.subCompartmentalize(dir, me, xml);
        }
        for (ETypeParameter t : eTypeParameters) {
            t.subCompartmentalize(dir, me, xml);
        }
        for (EParameter p : eParameters) {
            p.subCompartmentalize(dir, me, xml);
        }
        for (EGenericType g : eGenericExceptions) {
            g.subCompartmentalize(dir, me, xml);
        }

        Wizard.writeDocument(xml, doc);
    }

    public List<ETypeParameter> getETypeParameters() {
        if (eTypeParameters == null) {
            eTypeParameters = new ArrayList<ETypeParameter>();
        }
        return this.eTypeParameters;
    }

    public List<EParameter> getEParameters() {
        if (eParameters == null) {
            eParameters = new ArrayList<EParameter>();
        }
        return this.eParameters;
    }

    public List<EGenericType> getEGenericExceptions() {
        if (eGenericExceptions == null) {
            eGenericExceptions = new ArrayList<EGenericType>();
        }
        return this.eGenericExceptions;
    }

    public List<String> getEExceptions() {
        if (eExceptions == null) {
            eExceptions = new ArrayList<String>();
        }
        return this.eExceptions;
    }
}
