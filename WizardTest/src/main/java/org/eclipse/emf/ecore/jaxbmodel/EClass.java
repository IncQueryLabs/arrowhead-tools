//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.08.08 at 01:05:25 PM CEST 
//

package org.eclipse.emf.ecore.jaxbmodel;

import com.incquerylabs.arrowhead.tools.magic.Wizard;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "EClass", propOrder = {"eOperations", "eStructuralFeatures", "eGenericSuperTypes"})
public class EClass extends EClassifier {

    protected List<EOperation> eOperations;
    protected List<EStructuralFeature> eStructuralFeatures;
    protected List<EGenericType> eGenericSuperTypes;
    @XmlAttribute(name = "abstract")
    protected String _abstract;
    @XmlAttribute(name = "interface")
    protected String _interface;
    @XmlAttribute(name = "eSuperTypes")
    protected List<String> eSuperTypes;
    @XmlAttribute(name = "eAllAttributes")
    protected List<String> eAllAttributes;
    @XmlAttribute(name = "eAllReferences")
    protected List<String> eAllReferences;
    @XmlAttribute(name = "eReferences")
    protected List<String> eReferences;
    @XmlAttribute(name = "eAttributes")
    protected List<String> eAttributes;
    @XmlAttribute(name = "eAllContainments")
    protected List<String> eAllContainments;
    @XmlAttribute(name = "eAllOperations")
    protected List<String> eAllOperations;
    @XmlAttribute(name = "eAllStructuralFeatures")
    protected List<String> eAllStructuralFeatures;
    @XmlAttribute(name = "eAllSuperTypes")
    protected List<String> eAllSuperTypes;
    @XmlAttribute(name = "eIDAttribute")
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object eidAttribute;
    @XmlAttribute(name = "eAllGenericSuperTypes")
    protected List<String> eAllGenericSuperTypes;

    @Override
    public void subCompartmentalize(Path parent, Element topParent, Path topPath) throws IOException {
        if(name == null){
            name = "Unnamed" + Wizard.unnamedSuffix++;
        }
        String filename = Wizard.sanitizeFilename(name);
        Path xml = parent.resolve(filename + ".xml");
        if(Files.exists(xml)){
            filename = Wizard.degenarilzeName(parent, name);
            xml = parent.resolve(filename + ".xml");
        }
        Path dir = parent.resolve(filename);
        Files.createDirectory(dir);
        Files.createFile(xml);

        Element ref = topParent.addElement(Wizard.REF);
        ref.addAttribute(Wizard.HREF, topPath.relativize(xml).toString());

        Document doc = DocumentHelper.createDocument();
        Element me = doc.addElement("eClassifiers");
        me.addAttribute(Wizard.HREF, "ecore:EClass");
        me.addAttribute("name", name);
        Wizard.writeEClassifierAttributes(me, this);
        me.addAttribute("abstract", _abstract);
        me.addAttribute("interface", _interface);
        Wizard.addListAttribute(me, "eSuperTypes", eSuperTypes);
        Wizard.addListAttribute(me, "eAllAttributes", eAllAttributes);
        Wizard.addListAttribute(me, "eAllReferences", eAllReferences);
        Wizard.addListAttribute(me, "eReferences", eReferences);
        Wizard.addListAttribute(me, "eAttributes", eAttributes);
        Wizard.addListAttribute(me, "eAllContainments", eAllContainments);
        Wizard.addListAttribute(me, "eAllOperations", eAllOperations);
        Wizard.addListAttribute(me, "eAllStructuralFeatures", eAllStructuralFeatures);
        Wizard.addListAttribute(me, "eAllSuperTypes", eAllSuperTypes);
        if (eidAttribute != null) {
            me.addAttribute("eIDAttribute", eidAttribute.toString());
        }
        Wizard.addListAttribute(me, "eAllGenericSuperTypes", eAllGenericSuperTypes);

        if (eAnnotations != null) {
            for (EAnnotation an : eAnnotations) {
                an.subCompartmentalize(dir, me, xml);
            }
        }
        if (eTypeParameters != null) {
            for (ETypeParameter t : eTypeParameters) {
                t.subCompartmentalize(dir, me, xml);
            }
        }
        if (eOperations != null) {
            for (EOperation o : eOperations) {
                o.subCompartmentalize(dir, me, xml);
            }
        }
        if (eStructuralFeatures != null) {
            for (EStructuralFeature s : eStructuralFeatures) {
                s.subCompartmentalize(dir, me, xml);
            }
        }
        if (eGenericSuperTypes != null) {
            for (EGenericType g : eGenericSuperTypes) {
                g.subCompartmentalize(dir, me, xml);
            }
        }

        Wizard.writeDocument(xml, doc);
    }

    public List<EOperation> getEOperations() {
        if (eOperations == null) {
            eOperations = new ArrayList<EOperation>();
        }
        return this.eOperations;
    }

    public List<EStructuralFeature> getEStructuralFeatures() {
        if (eStructuralFeatures == null) {
            eStructuralFeatures = new ArrayList<EStructuralFeature>();
        }
        return this.eStructuralFeatures;
    }

    public List<EGenericType> getEGenericSuperTypes() {
        if (eGenericSuperTypes == null) {
            eGenericSuperTypes = new ArrayList<EGenericType>();
        }
        return this.eGenericSuperTypes;
    }

    public String getAbstract() {
        return _abstract;
    }

    public void setAbstract(String value) {
        this._abstract = value;
    }

    public String getInterface() {
        return _interface;
    }

    public void setInterface(String value) {
        this._interface = value;
    }

    public List<String> getESuperTypes() {
        if (eSuperTypes == null) {
            eSuperTypes = new ArrayList<String>();
        }
        return this.eSuperTypes;
    }

    public List<String> getEAllAttributes() {
        if (eAllAttributes == null) {
            eAllAttributes = new ArrayList<String>();
        }
        return this.eAllAttributes;
    }

    public List<String> getEAllReferences() {
        if (eAllReferences == null) {
            eAllReferences = new ArrayList<String>();
        }
        return this.eAllReferences;
    }

    public List<String> getEReferences() {
        if (eReferences == null) {
            eReferences = new ArrayList<String>();
        }
        return this.eReferences;
    }

    public List<String> getEAttributes() {
        if (eAttributes == null) {
            eAttributes = new ArrayList<String>();
        }
        return this.eAttributes;
    }

    public List<String> getEAllContainments() {
        if (eAllContainments == null) {
            eAllContainments = new ArrayList<String>();
        }
        return this.eAllContainments;
    }

    public List<String> getEAllOperations() {
        if (eAllOperations == null) {
            eAllOperations = new ArrayList<String>();
        }
        return this.eAllOperations;
    }

    public List<String> getEAllStructuralFeatures() {
        if (eAllStructuralFeatures == null) {
            eAllStructuralFeatures = new ArrayList<String>();
        }
        return this.eAllStructuralFeatures;
    }

    public List<String> getEAllSuperTypes() {
        if (eAllSuperTypes == null) {
            eAllSuperTypes = new ArrayList<String>();
        }
        return this.eAllSuperTypes;
    }

    public Object getEIDAttribute() {
        return eidAttribute;
    }

    public void setEIDAttribute(Object value) {
        this.eidAttribute = value;
    }

    public List<String> getEAllGenericSuperTypes() {
        if (eAllGenericSuperTypes == null) {
            eAllGenericSuperTypes = new ArrayList<String>();
        }
        return this.eAllGenericSuperTypes;
    }

}
