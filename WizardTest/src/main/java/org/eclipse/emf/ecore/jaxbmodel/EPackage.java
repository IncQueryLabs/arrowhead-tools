//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.08.08 at 01:05:25 PM CEST 
//

package org.eclipse.emf.ecore.jaxbmodel;

import com.incquerylabs.arrowhead.tools.magic.Wizard;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.QName;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "EPackage", propOrder = {"eClassifiers", "eSubpackages"})
public class EPackage extends ENamedElement {

    protected List<EClassifier> eClassifiers;
    protected List<EPackage> eSubpackages;
    @XmlAttribute(name = "nsURI")
    protected String nsURI;
    @XmlAttribute(name = "nsPrefix")
    protected String nsPrefix;
    @XmlAttribute(name = "eFactoryInstance")
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object eFactoryInstance;

    @Override
    public void subCompartmentalize(Path parent, Element topParent, Path topPath) throws IOException {
        if(name == null){
            name = "Unnamed" + Wizard.unnamedSuffix++;
        }
        String filename = Wizard.sanitizeFilename(name);
        Path xml = parent.resolve(filename + ".xml");
        if(Files.exists(xml)){
            filename = Wizard.degenarilzeName(parent, name);
            xml = parent.resolve(filename + ".xml");
        }
        Path dir = parent.resolve(filename);
        Files.createDirectory(dir);
        Files.createFile(xml);

        Element ref = topParent.addElement(Wizard.REF);
        ref.addAttribute(Wizard.HREF, topPath.relativize(xml).toString());
        Document doc = DocumentHelper.createDocument();
        Element me;
        if (topParent.getName().equals("Arrowhead")) {
            me = doc.addElement(new QName("EPackage", Wizard.EC));
            Wizard.addNamespaces(me);
        } else {
            me = doc.addElement("eSubpackages");
            me.addAttribute(Wizard.TYPE, "ecore:EPackage");
        }
        me.addAttribute(Wizard.N, name);
        me.addAttribute("nsUri", nsURI);
        me.addAttribute("nsPrefix", nsPrefix);

        if (eFactoryInstance != null) {
            me.addAttribute("eFactoryInstance", eFactoryInstance.toString());
        }
        if (eAnnotations != null) {
            for (EAnnotation a : eAnnotations) {
                a.subCompartmentalize(dir, me, xml);
            }
        }
        if (eSubpackages != null) {
            for (EPackage p : eSubpackages) {
                p.subCompartmentalize(dir, me, xml);
            }
        }
        if (eClassifiers != null) {
            for (EClassifier c : eClassifiers) {
                c.subCompartmentalize(dir, me, xml);
            }
        }

        Wizard.writeDocument(xml, doc);
    }

    public List<EClassifier> getEClassifiers() {
        if (eClassifiers == null) {
            eClassifiers = new ArrayList<EClassifier>();
        }
        return this.eClassifiers;
    }

    public List<EPackage> getESubpackages() {
        if (eSubpackages == null) {
            eSubpackages = new ArrayList<EPackage>();
        }
        return this.eSubpackages;
    }

    public String getNsURI() {
        return nsURI;
    }

    public void setNsURI(String value) {
        this.nsURI = value;
    }

    public String getNsPrefix() {
        return nsPrefix;
    }

    public void setNsPrefix(String value) {
        this.nsPrefix = value;
    }

    public Object getEFactoryInstance() {
        return eFactoryInstance;
    }

    public void setEFactoryInstance(Object value) {
        this.eFactoryInstance = value;
    }

}
